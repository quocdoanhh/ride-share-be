<?php

namespace App\Patterns\ThreadPool;

use App\Patterns\ThreadPool\Tasks\EmailNotificationTask;
use App\Patterns\ThreadPool\Tasks\PaymentProcessingTask;
use App\Patterns\ThreadPool\Tasks\LocationUpdateTask;
use App\Patterns\ThreadPool\Tasks\FareCalculationTask;
use App\Patterns\ThreadPool\Tasks\PushNotificationTask;
use App\Patterns\ThreadPool\Tasks\DataBackupTask;

/**
 * Thread Pool Manager - Demo class ƒë·ªÉ s·ª≠ d·ª•ng Thread Pool Pattern
 */
class ThreadPoolManager
{
    private ThreadPool $threadPool;

    public function __construct(int $maxWorkers = 3)
    {
        $this->threadPool = new ThreadPool($maxWorkers);
    }

    /**
     * Demo c∆° b·∫£n v·ªÅ Thread Pool
     */
    public function demonstrateBasicUsage(): void
    {
        echo "=== DEMO THREAD POOL PATTERN - C∆† B·∫¢N ===\n\n";

        // Kh·ªüi ƒë·ªông thread pool
        $this->threadPool->start();

        // Th√™m c√°c tasks v√†o queue
        $this->threadPool->submitTask(new EmailNotificationTask('G·ª≠i email x√°c nh·∫≠n', [
            'recipient' => 'user1@email.com',
            'subject' => 'X√°c nh·∫≠n ƒë·∫∑t chuy·∫øn ƒëi',
            'message' => 'Chuy·∫øn ƒëi c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n'
        ]));

        $this->threadPool->submitTask(new PaymentProcessingTask('X·ª≠ l√Ω thanh to√°n', [
            'amount' => 150000,
            'payment_method' => 'credit_card'
        ]));

        $this->threadPool->submitTask(new LocationUpdateTask('C·∫≠p nh·∫≠t v·ªã tr√≠ t√†i x·∫ø', [
            'driver_id' => 123,
            'lat' => 10.762622,
            'lng' => 106.660172
        ]));

        // X·ª≠ l√Ω t·∫•t c·∫£ tasks
        $this->threadPool->processTasks();

        // D·ª´ng thread pool
        $this->threadPool->stop();
    }

    /**
     * Demo x·ª≠ l√Ω nhi·ªÅu tasks c√πng l√∫c
     */
    public function demonstrateConcurrentProcessing(): void
    {
        echo "\n=== DEMO THREAD POOL PATTERN - X·ª¨ L√ù ƒê·ªíNG TH·ªúI ===\n\n";

        $this->threadPool->start();

        // Th√™m nhi·ªÅu tasks c√πng l√∫c
        for ($i = 1; $i <= 8; $i++) {
            $this->threadPool->submitTask(new FareCalculationTask("T√≠nh c∆∞·ªõc ph√≠ chuy·∫øn {$i}", [
                'distance' => rand(5, 20),
                'duration' => rand(10, 45),
                'vehicle_type' => ['car', 'bike', 'premium'][rand(0, 2)]
            ]));
        }

        $this->threadPool->processTasks();
        $this->threadPool->stop();
    }

    /**
     * Demo x·ª≠ l√Ω tasks v·ªõi l·ªói
     */
    public function demonstrateErrorHandling(): void
    {
        echo "\n=== DEMO THREAD POOL PATTERN - X·ª¨ L√ù L·ªñI ===\n\n";

        $this->threadPool->start();

        // Tasks th√†nh c√¥ng
        $this->threadPool->submitTask(new PushNotificationTask('Th√¥ng b√°o chuy·∫øn ƒëi', [
            'user_id' => 1,
            'title' => 'T√†i x·∫ø ƒëang ƒë·∫øn',
            'body' => 'T√†i x·∫ø s·∫Ω ƒë·∫øn trong 5 ph√∫t'
        ]));

        // Task c√≥ th·ªÉ th·∫•t b·∫°i (payment processing)
        $this->threadPool->submitTask(new PaymentProcessingTask('Thanh to√°n c√≥ th·ªÉ th·∫•t b·∫°i', [
            'amount' => 200000,
            'payment_method' => 'expired_card'
        ]));

        // Task th√†nh c√¥ng kh√°c
        $this->threadPool->submitTask(new LocationUpdateTask('C·∫≠p nh·∫≠t v·ªã tr√≠', [
            'driver_id' => 456,
            'lat' => 10.800000,
            'lng' => 106.700000
        ]));

        $this->threadPool->processTasks();
        $this->threadPool->stop();
    }

    /**
     * Demo workload th·ª±c t·∫ø
     */
    public function demonstrateRealWorldWorkload(): void
    {
        echo "\n=== DEMO THREAD POOL PATTERN - WORKLOAD TH·ª∞C T·∫æ ===\n\n";

        $this->threadPool->start();

        // Simulate real-world workload
        $tasks = [
            // Email notifications
            new EmailNotificationTask('Email ch√†o m·ª´ng', [
                'recipient' => 'newuser@email.com',
                'subject' => 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi RideShare',
                'message' => 'C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω!'
            ]),
            new EmailNotificationTask('Email x√°c nh·∫≠n thanh to√°n', [
                'recipient' => 'user2@email.com',
                'subject' => 'X√°c nh·∫≠n thanh to√°n',
                'message' => 'Thanh to√°n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω'
            ]),

            // Payment processing
            new PaymentProcessingTask('Thanh to√°n chuy·∫øn ƒëi 1', [
                'amount' => 85000,
                'payment_method' => 'momo'
            ]),
            new PaymentProcessingTask('Thanh to√°n chuy·∫øn ƒëi 2', [
                'amount' => 120000,
                'payment_method' => 'zalo_pay'
            ]),

            // Location updates
            new LocationUpdateTask('C·∫≠p nh·∫≠t v·ªã tr√≠ t√†i x·∫ø 1', [
                'driver_id' => 101,
                'lat' => 10.750000,
                'lng' => 106.650000
            ]),
            new LocationUpdateTask('C·∫≠p nh·∫≠t v·ªã tr√≠ t√†i x·∫ø 2', [
                'driver_id' => 102,
                'lat' => 10.780000,
                'lng' => 106.680000
            ]),

            // Fare calculations
            new FareCalculationTask('T√≠nh c∆∞·ªõc xe m√°y', [
                'distance' => 8.5,
                'duration' => 25,
                'vehicle_type' => 'bike'
            ]),
            new FareCalculationTask('T√≠nh c∆∞·ªõc xe h∆°i', [
                'distance' => 15.2,
                'duration' => 35,
                'vehicle_type' => 'car'
            ]),

            // Push notifications
            new PushNotificationTask('Th√¥ng b√°o t√†i x·∫ø ƒë·∫øn', [
                'user_id' => 201,
                'title' => 'T√†i x·∫ø ƒë√£ ƒë·∫øn',
                'body' => 'Vui l√≤ng ra ngo√†i ƒë·ªÉ l√™n xe'
            ]),
            new PushNotificationTask('Th√¥ng b√°o ho√†n th√†nh chuy·∫øn ƒëi', [
                'user_id' => 202,
                'title' => 'Chuy·∫øn ƒëi ho√†n th√†nh',
                'body' => 'C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•'
            ]),

            // Data backup
            new DataBackupTask('Backup b·∫£ng users', [
                'table' => 'users',
                'backup_type' => 'daily'
            ]),
            new DataBackupTask('Backup b·∫£ng trips', [
                'table' => 'trips',
                'backup_type' => 'daily'
            ])
        ];

        // Submit t·∫•t c·∫£ tasks
        foreach ($tasks as $task) {
            $this->threadPool->submitTask($task);
        }

        // X·ª≠ l√Ω t·∫•t c·∫£ tasks
        $this->threadPool->processTasks();

        // Hi·ªÉn th·ªã th·ªëng k√™ chi ti·∫øt
        $this->displayDetailedStats();

        $this->threadPool->stop();
    }

    /**
     * Hi·ªÉn th·ªã th·ªëng k√™ chi ti·∫øt
     */
    private function displayDetailedStats(): void
    {
        $stats = $this->threadPool->getStats();
        $completedTasks = $this->threadPool->getCompletedTasks();
        $failedTasks = $this->threadPool->getFailedTasks();

        echo "\nüìä TH·ªêNG K√ä CHI TI·∫æT:\n";
        echo "   - S·ªë workers t·ªëi ƒëa: {$stats['max_workers']}\n";
        echo "   - Workers ƒëang ho·∫°t ƒë·ªông: {$stats['active_workers']}\n";
        echo "   - Tasks trong queue: {$stats['queue_size']}\n";
        echo "   - Tasks ho√†n th√†nh: {$stats['completed_tasks']}\n";
        echo "   - Tasks th·∫•t b·∫°i: {$stats['failed_tasks']}\n";
        echo "   - Tr·∫°ng th√°i pool: " . ($stats['is_running'] ? 'ƒêang ch·∫°y' : 'ƒê√£ d·ª´ng') . "\n";

        if (!empty($completedTasks)) {
            echo "\n‚úÖ TASKS HO√ÄN TH√ÄNH:\n";
            foreach ($completedTasks as $task) {
                echo "   - {$task['task']} (Worker {$task['worker_id']}) - {$task['execution_time']}s\n";
            }
        }

        if (!empty($failedTasks)) {
            echo "\n‚ùå TASKS TH·∫§T B·∫†I:\n";
            foreach ($failedTasks as $task) {
                echo "   - {$task['task']} (Worker {$task['worker_id']}): {$task['error']}\n";
            }
        }
    }

    /**
     * Demo so s√°nh hi·ªáu su·∫•t
     */
    public function demonstratePerformanceComparison(): void
    {
        echo "\n=== DEMO THREAD POOL PATTERN - SO S√ÅNH HI·ªÜU SU·∫§T ===\n\n";

        // Test v·ªõi 1 worker (sequential)
        echo "üîÑ Test v·ªõi 1 worker (sequential):\n";
        $sequentialPool = new ThreadPool(1);
        $startTime = microtime(true);

        $sequentialPool->start();
        for ($i = 1; $i <= 5; $i++) {
            $sequentialPool->submitTask(new FareCalculationTask("T√≠nh c∆∞·ªõc {$i}", [
                'distance' => rand(5, 15),
                'duration' => rand(10, 30),
                'vehicle_type' => 'car'
            ]));
        }
        $sequentialPool->processTasks();
        $sequentialPool->stop();

        $sequentialTime = microtime(true) - $startTime;

        // Test v·ªõi 5 workers (parallel)
        echo "\nüîÑ Test v·ªõi 5 workers (parallel):\n";
        $parallelPool = new ThreadPool(5);
        $startTime = microtime(true);

        $parallelPool->start();
        for ($i = 1; $i <= 5; $i++) {
            $parallelPool->submitTask(new FareCalculationTask("T√≠nh c∆∞·ªõc {$i}", [
                'distance' => rand(5, 15),
                'duration' => rand(10, 30),
                'vehicle_type' => 'car'
            ]));
        }
        $parallelPool->processTasks();
        $parallelPool->stop();

        $parallelTime = microtime(true) - $startTime;

        echo "\nüìà K·∫æT QU·∫¢ SO S√ÅNH:\n";
        echo "   - Sequential (1 worker): " . round($sequentialTime, 3) . "s\n";
        echo "   - Parallel (5 workers): " . round($parallelTime, 3) . "s\n";
        echo "   - C·∫£i thi·ªán: " . round((($sequentialTime - $parallelTime) / $sequentialTime) * 100, 1) . "%\n";
    }
}